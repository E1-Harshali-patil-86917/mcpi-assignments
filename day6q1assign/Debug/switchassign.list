
switchassign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000fcc  08000fcc  00001fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800100c  0800100c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800100c  0800100c  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001014  08001014  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001014  08001014  00002014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001018  08001018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800101c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000178  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017a6  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000651  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00004e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b6  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185c1  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a4a  00000000  00000000  0001d5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c2f9  00000000  00000000  0001f041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab33a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000076c  00000000  00000000  000ab380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000abaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  000abb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08000fb4 	.word	0x08000fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08000fb4 	.word	0x08000fb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/*
Orange LED will blink when switch is pressed -- Any Optimization Level
As flag is declared volatile.
*/

int main(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
	char str[32];
	SystemInit();
 8000276:	f000 f8c1 	bl	80003fc <SystemInit>
	SwitchInit();
 800027a:	f000 f83b 	bl	80002f4 <SwitchInit>
	UartInit(9600);
 800027e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000282:	f000 f90d 	bl	80004a0 <UartInit>


	while(1) {

		while(SwitchExtiFlag == 0)
 8000286:	bf00      	nop
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <main+0x40>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0fb      	beq.n	8000288 <main+0x18>
			;
		sprintf (str,"count=%d\r\n",count);
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <main+0x44>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	463b      	mov	r3, r7
 8000296:	4908      	ldr	r1, [pc, #32]	@ (80002b8 <main+0x48>)
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f9f3 	bl	8000684 <siprintf>
		UartPuts(str);
 800029e:	463b      	mov	r3, r7
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f961 	bl	8000568 <UartPuts>

		SwitchExtiFlag = 0;
 80002a6:	4b02      	ldr	r3, [pc, #8]	@ (80002b0 <main+0x40>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
		while(SwitchExtiFlag == 0)
 80002ac:	e7eb      	b.n	8000286 <main+0x16>
 80002ae:	bf00      	nop
 80002b0:	20000070 	.word	0x20000070
 80002b4:	20000074 	.word	0x20000074
 80002b8:	08000fcc 	.word	0x08000fcc

080002bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	db0b      	blt.n	80002e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 021f 	and.w	r2, r3, #31
 80002d4:	4906      	ldr	r1, [pc, #24]	@ (80002f0 <__NVIC_EnableIRQ+0x34>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	095b      	lsrs	r3, r3, #5
 80002dc:	2001      	movs	r0, #1
 80002de:	fa00 f202 	lsl.w	r2, r0, r2
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <SwitchInit>:
*/

#include "switch_intr.h"
#include "uart.h"

void SwitchInit(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	// Enable GPIO clock
    RCC->AHB1ENR |= BV(SWITCH_GPIO_CLKEN);
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <SwitchInit+0x58>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	4a13      	ldr	r2, [pc, #76]	@ (800034c <SwitchInit+0x58>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6313      	str	r3, [r2, #48]	@ 0x30
	// Set gpio mode as input
    GPIOA->MODER &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <SwitchInit+0x5c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a11      	ldr	r2, [pc, #68]	@ (8000350 <SwitchInit+0x5c>)
 800030a:	f023 0303 	bic.w	r3, r3, #3
 800030e:	6013      	str	r3, [r2, #0]
	// set no pull-up pull-down registers
    GPIOA->PUPDR &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <SwitchInit+0x5c>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a0e      	ldr	r2, [pc, #56]	@ (8000350 <SwitchInit+0x5c>)
 8000316:	f023 0303 	bic.w	r3, r3, #3
 800031a:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
    EXTI->FTSR |= BV(SWITCH_EXTI);
 800031c:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <SwitchInit+0x60>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a0c      	ldr	r2, [pc, #48]	@ (8000354 <SwitchInit+0x60>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
    EXTI->IMR |= BV(SWITCH_EXTI);
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <SwitchInit+0x60>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a09      	ldr	r2, [pc, #36]	@ (8000354 <SwitchInit+0x60>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx) -- EXTI0 --> EXTICR1[3:0] = 0000
    SYSCFG->EXTICR[0] &= ~(BV(3)|BV(2)|BV(1)|BV(0));
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <SwitchInit+0x64>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a07      	ldr	r2, [pc, #28]	@ (8000358 <SwitchInit+0x64>)
 800033a:	f023 030f 	bic.w	r3, r3, #15
 800033e:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
    NVIC_EnableIRQ(EXTI0_IRQn); // EXTI0_IRQn
 8000340:	2006      	movs	r0, #6
 8000342:	f7ff ffbb 	bl	80002bc <__NVIC_EnableIRQ>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	40020000 	.word	0x40020000
 8000354:	40013c00 	.word	0x40013c00
 8000358:	40013800 	.word	0x40013800

0800035c <EXTI0_IRQHandler>:
// Global SwitchExtiFlag
volatile uint32_t SwitchExtiFlag = 0;

int count=0;

void EXTI0_IRQHandler(void) {
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	// acknowledge the interrupt
	EXTI->PR |= BV(SWITCH_EXTI);
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <EXTI0_IRQHandler+0x28>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a07      	ldr	r2, [pc, #28]	@ (8000384 <EXTI0_IRQHandler+0x28>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6153      	str	r3, [r2, #20]
	// interrupt handling logic

	SwitchExtiFlag = 1;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <EXTI0_IRQHandler+0x2c>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
	count++;
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <EXTI0_IRQHandler+0x30>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	4a04      	ldr	r2, [pc, #16]	@ (800038c <EXTI0_IRQHandler+0x30>)
 800037a:	6013      	str	r3, [r2, #0]


}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40013c00 	.word	0x40013c00
 8000388:	20000070 	.word	0x20000070
 800038c:	20000074 	.word	0x20000074

08000390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000398:	4a14      	ldr	r2, [pc, #80]	@ (80003ec <_sbrk+0x5c>)
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <_sbrk+0x60>)
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003a4:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <_sbrk+0x64>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d102      	bne.n	80003b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ac:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <_sbrk+0x64>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	@ (80003f8 <_sbrk+0x68>)
 80003b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003b2:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <_sbrk+0x64>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d207      	bcs.n	80003d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003c0:	f000 f980 	bl	80006c4 <__errno>
 80003c4:	4603      	mov	r3, r0
 80003c6:	220c      	movs	r2, #12
 80003c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ce:	e009      	b.n	80003e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003d0:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <_sbrk+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <_sbrk+0x64>)
 80003e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003e2:	68fb      	ldr	r3, [r7, #12]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20020000 	.word	0x20020000
 80003f0:	00000400 	.word	0x00000400
 80003f4:	20000078 	.word	0x20000078
 80003f8:	200001d0 	.word	0x200001d0

080003fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  DWT_Init();
 8000400:	f000 f802 	bl	8000408 <DWT_Init>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800040c:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <DWT_Init+0x58>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	4a13      	ldr	r2, [pc, #76]	@ (8000460 <DWT_Init+0x58>)
 8000412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000416:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <DWT_Init+0x58>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a10      	ldr	r2, [pc, #64]	@ (8000460 <DWT_Init+0x58>)
 800041e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000422:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <DWT_Init+0x5c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0e      	ldr	r2, [pc, #56]	@ (8000464 <DWT_Init+0x5c>)
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <DWT_Init+0x5c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0b      	ldr	r2, [pc, #44]	@ (8000464 <DWT_Init+0x5c>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800043c:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <DWT_Init+0x5c>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000442:	bf00      	nop
    __ASM volatile ("NOP");
 8000444:	bf00      	nop
    __ASM volatile ("NOP");
 8000446:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <DWT_Init+0x5c>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	bf0c      	ite	eq
 8000450:	2301      	moveq	r3, #1
 8000452:	2300      	movne	r3, #0
 8000454:	b2db      	uxtb	r3, r3
}
 8000456:	4618      	mov	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000edf0 	.word	0xe000edf0
 8000464:	e0001000 	.word	0xe0001000

08000468 <__NVIC_EnableIRQ>:
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db0b      	blt.n	8000492 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 021f 	and.w	r2, r3, #31
 8000480:	4906      	ldr	r1, [pc, #24]	@ (800049c <__NVIC_EnableIRQ+0x34>)
 8000482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000486:	095b      	lsrs	r3, r3, #5
 8000488:	2001      	movs	r0, #1
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	e000e100 	.word	0xe000e100

080004a0 <UartInit>:
*/

#include <stdio.h>
#include "uart.h"

void UartInit(uint32_t baud) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	// enable gpio clock -- AHB1ENR.0
	RCC->AHB1ENR |= BV(GPIO_UART_CLKEN);
 80004a8:	4b2c      	ldr	r3, [pc, #176]	@ (800055c <UartInit+0xbc>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a2b      	ldr	r2, [pc, #172]	@ (800055c <UartInit+0xbc>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pins to alt fn 7 (AF7) -- AFRL = 0111
	GPIO_UART->AFR[0] |= BV(14) | BV(13) | BV(12) | BV(10) | BV(9) | BV(8);
 80004b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000560 <UartInit+0xc0>)
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	4a29      	ldr	r2, [pc, #164]	@ (8000560 <UartInit+0xc0>)
 80004ba:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80004be:	6213      	str	r3, [r2, #32]
	GPIO_UART->AFR[0] &= ~(BV(15) | BV(11));
 80004c0:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <UartInit+0xc0>)
 80004c2:	6a1b      	ldr	r3, [r3, #32]
 80004c4:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <UartInit+0xc0>)
 80004c6:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 80004ca:	6213      	str	r3, [r2, #32]
	// set gpio pins mode to alt fn	-- MODER = 10
	GPIO_UART->MODER &= ~(BV(UART_TX_PIN*2) | BV(UART_RX_PIN*2));
 80004cc:	4b24      	ldr	r3, [pc, #144]	@ (8000560 <UartInit+0xc0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a23      	ldr	r2, [pc, #140]	@ (8000560 <UartInit+0xc0>)
 80004d2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80004d6:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER |= (BV(UART_TX_PIN*2+1) | BV(UART_RX_PIN*2+1));
 80004d8:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <UartInit+0xc0>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a20      	ldr	r2, [pc, #128]	@ (8000560 <UartInit+0xc0>)
 80004de:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80004e2:	6013      	str	r3, [r2, #0]

	// enable uart clock -- APB1ENR.17
	RCC->APB1ENR |= BV(UART_CLKEN);
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <UartInit+0xbc>)
 80004e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004e8:	4a1c      	ldr	r2, [pc, #112]	@ (800055c <UartInit+0xbc>)
 80004ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ee:	6413      	str	r3, [r2, #64]	@ 0x40
	// enable transmission and reception on uart
	UART->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <UartInit+0xc4>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	60da      	str	r2, [r3, #12]
	// set word length in CR1 -- M bit = 8-bit data len, Over8 = 0
	UART->CR1 &= ~(BV(USART_CR1_M_Pos) | BV(USART_CR1_OVER8_Pos));
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <UartInit+0xc4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000564 <UartInit+0xc4>)
 80004fc:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000500:	60d3      	str	r3, [r2, #12]
	// set stop bits in CR2 -- 1 stop bit
	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 8000502:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <UartInit+0xc4>)
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <UartInit+0xc4>)
 8000508:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800050c:	6113      	str	r3, [r2, #16]
	// set baud rate -- UBRR
	if(baud == 9600)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000514:	d104      	bne.n	8000520 <UartInit+0x80>
		UART->BRR = UBRR_9600;
 8000516:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <UartInit+0xc4>)
 8000518:	f240 6283 	movw	r2, #1667	@ 0x683
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	e00f      	b.n	8000540 <UartInit+0xa0>
	else if(baud == 38400)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000526:	d104      	bne.n	8000532 <UartInit+0x92>
		UART->BRR = UBRR_38400;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <UartInit+0xc4>)
 800052a:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	e006      	b.n	8000540 <UartInit+0xa0>
	else if(baud == 115200)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000538:	d102      	bne.n	8000540 <UartInit+0xa0>
			UART->BRR = UBRR_115200;
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <UartInit+0xc4>)
 800053c:	228b      	movs	r2, #139	@ 0x8b
 800053e:	609a      	str	r2, [r3, #8]
	// enable USART interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 8000540:	2026      	movs	r0, #38	@ 0x26
 8000542:	f7ff ff91 	bl	8000468 <__NVIC_EnableIRQ>
	// enable uart in CR1 -- UE bit
	UART->CR1 |= BV(USART_CR1_UE_Pos);
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <UartInit+0xc4>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <UartInit+0xc4>)
 800054c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000550:	60d3      	str	r3, [r2, #12]
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800
 8000560:	40020000 	.word	0x40020000
 8000564:	40004400 	.word	0x40004400

08000568 <UartPuts>:

char *tx_str;
int tx_index;
volatile int tx_complete=1;

void UartPuts(char str[]) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	// wait for previous string tx complete
	while(tx_complete == 0);
 8000570:	bf00      	nop
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <UartPuts+0x4c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0fb      	beq.n	8000572 <UartPuts+0xa>
	// get ready for transmission
	tx_str = str;
 800057a:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <UartPuts+0x50>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 8000580:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <UartPuts+0x54>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
	tx_complete = 0;
 8000586:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <UartPuts+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
	// write first char
	UART->DR = tx_str[tx_index];
 800058c:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <UartPuts+0x50>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <UartPuts+0x54>)
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	4413      	add	r3, r2
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <UartPuts+0x58>)
 800059a:	605a      	str	r2, [r3, #4]
	// enable transmission interrupt
	UART->CR1 |= BV(USART_CR1_TXEIE_Pos);
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <UartPuts+0x58>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <UartPuts+0x58>)
 80005a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	20000080 	.word	0x20000080
 80005c0:	40004400 	.word	0x40004400

080005c4 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
	// check if interrupt is TXE and then handle it
	if(UART->SR & BV(USART_SR_TXE_Pos)) {
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <USART2_IRQHandler+0x5c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01e      	beq.n	8000614 <USART2_IRQHandler+0x50>
		// send next char (if not '\0')
		tx_index++;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <USART2_IRQHandler+0x60>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <USART2_IRQHandler+0x60>)
 80005de:	6013      	str	r3, [r2, #0]
		char ch = tx_str[tx_index];
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <USART2_IRQHandler+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <USART2_IRQHandler+0x60>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	71fb      	strb	r3, [r7, #7]
		if(ch != '\0')
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d003      	beq.n	80005fc <USART2_IRQHandler+0x38>
			UART->DR = ch;
 80005f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <USART2_IRQHandler+0x5c>)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	6053      	str	r3, [r2, #4]
			UART->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
			tx_complete = 1;
			tx_str = NULL;
		}
	}
}
 80005fa:	e00b      	b.n	8000614 <USART2_IRQHandler+0x50>
			UART->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <USART2_IRQHandler+0x5c>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <USART2_IRQHandler+0x5c>)
 8000602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000606:	60d3      	str	r3, [r2, #12]
			tx_complete = 1;
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <USART2_IRQHandler+0x68>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
			tx_str = NULL;
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <USART2_IRQHandler+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40004400 	.word	0x40004400
 8000624:	20000080 	.word	0x20000080
 8000628:	2000007c 	.word	0x2000007c
 800062c:	20000000 	.word	0x20000000

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f7ff fee2 	bl	80003fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	@ (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	@ (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	@ (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 f837 	bl	80006d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fe05 	bl	8000270 <main>

08000666 <LoopForever>:

LoopForever:
  b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000674:	0800101c 	.word	0x0800101c
  ldr r2, =_sbss
 8000678:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800067c:	200001cc 	.word	0x200001cc

08000680 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <siprintf>:
 8000684:	b40e      	push	{r1, r2, r3}
 8000686:	b500      	push	{lr}
 8000688:	b09c      	sub	sp, #112	@ 0x70
 800068a:	ab1d      	add	r3, sp, #116	@ 0x74
 800068c:	9002      	str	r0, [sp, #8]
 800068e:	9006      	str	r0, [sp, #24]
 8000690:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <siprintf+0x38>)
 8000696:	9107      	str	r1, [sp, #28]
 8000698:	9104      	str	r1, [sp, #16]
 800069a:	4909      	ldr	r1, [pc, #36]	@ (80006c0 <siprintf+0x3c>)
 800069c:	f853 2b04 	ldr.w	r2, [r3], #4
 80006a0:	9105      	str	r1, [sp, #20]
 80006a2:	6800      	ldr	r0, [r0, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	a902      	add	r1, sp, #8
 80006a8:	f000 f98c 	bl	80009c4 <_svfiprintf_r>
 80006ac:	9b02      	ldr	r3, [sp, #8]
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	b01c      	add	sp, #112	@ 0x70
 80006b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80006b8:	b003      	add	sp, #12
 80006ba:	4770      	bx	lr
 80006bc:	20000004 	.word	0x20000004
 80006c0:	ffff0208 	.word	0xffff0208

080006c4 <__errno>:
 80006c4:	4b01      	ldr	r3, [pc, #4]	@ (80006cc <__errno+0x8>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000004 	.word	0x20000004

080006d0 <__libc_init_array>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000708 <__libc_init_array+0x38>)
 80006d4:	4c0d      	ldr	r4, [pc, #52]	@ (800070c <__libc_init_array+0x3c>)
 80006d6:	1b64      	subs	r4, r4, r5
 80006d8:	10a4      	asrs	r4, r4, #2
 80006da:	2600      	movs	r6, #0
 80006dc:	42a6      	cmp	r6, r4
 80006de:	d109      	bne.n	80006f4 <__libc_init_array+0x24>
 80006e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000710 <__libc_init_array+0x40>)
 80006e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000714 <__libc_init_array+0x44>)
 80006e4:	f000 fc66 	bl	8000fb4 <_init>
 80006e8:	1b64      	subs	r4, r4, r5
 80006ea:	10a4      	asrs	r4, r4, #2
 80006ec:	2600      	movs	r6, #0
 80006ee:	42a6      	cmp	r6, r4
 80006f0:	d105      	bne.n	80006fe <__libc_init_array+0x2e>
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f8:	4798      	blx	r3
 80006fa:	3601      	adds	r6, #1
 80006fc:	e7ee      	b.n	80006dc <__libc_init_array+0xc>
 80006fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000702:	4798      	blx	r3
 8000704:	3601      	adds	r6, #1
 8000706:	e7f2      	b.n	80006ee <__libc_init_array+0x1e>
 8000708:	08001014 	.word	0x08001014
 800070c:	08001014 	.word	0x08001014
 8000710:	08001014 	.word	0x08001014
 8000714:	08001018 	.word	0x08001018

08000718 <__retarget_lock_acquire_recursive>:
 8000718:	4770      	bx	lr

0800071a <__retarget_lock_release_recursive>:
 800071a:	4770      	bx	lr

0800071c <_free_r>:
 800071c:	b538      	push	{r3, r4, r5, lr}
 800071e:	4605      	mov	r5, r0
 8000720:	2900      	cmp	r1, #0
 8000722:	d041      	beq.n	80007a8 <_free_r+0x8c>
 8000724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000728:	1f0c      	subs	r4, r1, #4
 800072a:	2b00      	cmp	r3, #0
 800072c:	bfb8      	it	lt
 800072e:	18e4      	addlt	r4, r4, r3
 8000730:	f000 f8e0 	bl	80008f4 <__malloc_lock>
 8000734:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <_free_r+0x90>)
 8000736:	6813      	ldr	r3, [r2, #0]
 8000738:	b933      	cbnz	r3, 8000748 <_free_r+0x2c>
 800073a:	6063      	str	r3, [r4, #4]
 800073c:	6014      	str	r4, [r2, #0]
 800073e:	4628      	mov	r0, r5
 8000740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000744:	f000 b8dc 	b.w	8000900 <__malloc_unlock>
 8000748:	42a3      	cmp	r3, r4
 800074a:	d908      	bls.n	800075e <_free_r+0x42>
 800074c:	6820      	ldr	r0, [r4, #0]
 800074e:	1821      	adds	r1, r4, r0
 8000750:	428b      	cmp	r3, r1
 8000752:	bf01      	itttt	eq
 8000754:	6819      	ldreq	r1, [r3, #0]
 8000756:	685b      	ldreq	r3, [r3, #4]
 8000758:	1809      	addeq	r1, r1, r0
 800075a:	6021      	streq	r1, [r4, #0]
 800075c:	e7ed      	b.n	800073a <_free_r+0x1e>
 800075e:	461a      	mov	r2, r3
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	b10b      	cbz	r3, 8000768 <_free_r+0x4c>
 8000764:	42a3      	cmp	r3, r4
 8000766:	d9fa      	bls.n	800075e <_free_r+0x42>
 8000768:	6811      	ldr	r1, [r2, #0]
 800076a:	1850      	adds	r0, r2, r1
 800076c:	42a0      	cmp	r0, r4
 800076e:	d10b      	bne.n	8000788 <_free_r+0x6c>
 8000770:	6820      	ldr	r0, [r4, #0]
 8000772:	4401      	add	r1, r0
 8000774:	1850      	adds	r0, r2, r1
 8000776:	4283      	cmp	r3, r0
 8000778:	6011      	str	r1, [r2, #0]
 800077a:	d1e0      	bne.n	800073e <_free_r+0x22>
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	6053      	str	r3, [r2, #4]
 8000782:	4408      	add	r0, r1
 8000784:	6010      	str	r0, [r2, #0]
 8000786:	e7da      	b.n	800073e <_free_r+0x22>
 8000788:	d902      	bls.n	8000790 <_free_r+0x74>
 800078a:	230c      	movs	r3, #12
 800078c:	602b      	str	r3, [r5, #0]
 800078e:	e7d6      	b.n	800073e <_free_r+0x22>
 8000790:	6820      	ldr	r0, [r4, #0]
 8000792:	1821      	adds	r1, r4, r0
 8000794:	428b      	cmp	r3, r1
 8000796:	bf04      	itt	eq
 8000798:	6819      	ldreq	r1, [r3, #0]
 800079a:	685b      	ldreq	r3, [r3, #4]
 800079c:	6063      	str	r3, [r4, #4]
 800079e:	bf04      	itt	eq
 80007a0:	1809      	addeq	r1, r1, r0
 80007a2:	6021      	streq	r1, [r4, #0]
 80007a4:	6054      	str	r4, [r2, #4]
 80007a6:	e7ca      	b.n	800073e <_free_r+0x22>
 80007a8:	bd38      	pop	{r3, r4, r5, pc}
 80007aa:	bf00      	nop
 80007ac:	200001c8 	.word	0x200001c8

080007b0 <sbrk_aligned>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	4e0f      	ldr	r6, [pc, #60]	@ (80007f0 <sbrk_aligned+0x40>)
 80007b4:	460c      	mov	r4, r1
 80007b6:	6831      	ldr	r1, [r6, #0]
 80007b8:	4605      	mov	r5, r0
 80007ba:	b911      	cbnz	r1, 80007c2 <sbrk_aligned+0x12>
 80007bc:	f000 fba6 	bl	8000f0c <_sbrk_r>
 80007c0:	6030      	str	r0, [r6, #0]
 80007c2:	4621      	mov	r1, r4
 80007c4:	4628      	mov	r0, r5
 80007c6:	f000 fba1 	bl	8000f0c <_sbrk_r>
 80007ca:	1c43      	adds	r3, r0, #1
 80007cc:	d103      	bne.n	80007d6 <sbrk_aligned+0x26>
 80007ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80007d2:	4620      	mov	r0, r4
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	1cc4      	adds	r4, r0, #3
 80007d8:	f024 0403 	bic.w	r4, r4, #3
 80007dc:	42a0      	cmp	r0, r4
 80007de:	d0f8      	beq.n	80007d2 <sbrk_aligned+0x22>
 80007e0:	1a21      	subs	r1, r4, r0
 80007e2:	4628      	mov	r0, r5
 80007e4:	f000 fb92 	bl	8000f0c <_sbrk_r>
 80007e8:	3001      	adds	r0, #1
 80007ea:	d1f2      	bne.n	80007d2 <sbrk_aligned+0x22>
 80007ec:	e7ef      	b.n	80007ce <sbrk_aligned+0x1e>
 80007ee:	bf00      	nop
 80007f0:	200001c4 	.word	0x200001c4

080007f4 <_malloc_r>:
 80007f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f8:	1ccd      	adds	r5, r1, #3
 80007fa:	f025 0503 	bic.w	r5, r5, #3
 80007fe:	3508      	adds	r5, #8
 8000800:	2d0c      	cmp	r5, #12
 8000802:	bf38      	it	cc
 8000804:	250c      	movcc	r5, #12
 8000806:	2d00      	cmp	r5, #0
 8000808:	4606      	mov	r6, r0
 800080a:	db01      	blt.n	8000810 <_malloc_r+0x1c>
 800080c:	42a9      	cmp	r1, r5
 800080e:	d904      	bls.n	800081a <_malloc_r+0x26>
 8000810:	230c      	movs	r3, #12
 8000812:	6033      	str	r3, [r6, #0]
 8000814:	2000      	movs	r0, #0
 8000816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800081a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008f0 <_malloc_r+0xfc>
 800081e:	f000 f869 	bl	80008f4 <__malloc_lock>
 8000822:	f8d8 3000 	ldr.w	r3, [r8]
 8000826:	461c      	mov	r4, r3
 8000828:	bb44      	cbnz	r4, 800087c <_malloc_r+0x88>
 800082a:	4629      	mov	r1, r5
 800082c:	4630      	mov	r0, r6
 800082e:	f7ff ffbf 	bl	80007b0 <sbrk_aligned>
 8000832:	1c43      	adds	r3, r0, #1
 8000834:	4604      	mov	r4, r0
 8000836:	d158      	bne.n	80008ea <_malloc_r+0xf6>
 8000838:	f8d8 4000 	ldr.w	r4, [r8]
 800083c:	4627      	mov	r7, r4
 800083e:	2f00      	cmp	r7, #0
 8000840:	d143      	bne.n	80008ca <_malloc_r+0xd6>
 8000842:	2c00      	cmp	r4, #0
 8000844:	d04b      	beq.n	80008de <_malloc_r+0xea>
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	4639      	mov	r1, r7
 800084a:	4630      	mov	r0, r6
 800084c:	eb04 0903 	add.w	r9, r4, r3
 8000850:	f000 fb5c 	bl	8000f0c <_sbrk_r>
 8000854:	4581      	cmp	r9, r0
 8000856:	d142      	bne.n	80008de <_malloc_r+0xea>
 8000858:	6821      	ldr	r1, [r4, #0]
 800085a:	1a6d      	subs	r5, r5, r1
 800085c:	4629      	mov	r1, r5
 800085e:	4630      	mov	r0, r6
 8000860:	f7ff ffa6 	bl	80007b0 <sbrk_aligned>
 8000864:	3001      	adds	r0, #1
 8000866:	d03a      	beq.n	80008de <_malloc_r+0xea>
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	442b      	add	r3, r5
 800086c:	6023      	str	r3, [r4, #0]
 800086e:	f8d8 3000 	ldr.w	r3, [r8]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	bb62      	cbnz	r2, 80008d0 <_malloc_r+0xdc>
 8000876:	f8c8 7000 	str.w	r7, [r8]
 800087a:	e00f      	b.n	800089c <_malloc_r+0xa8>
 800087c:	6822      	ldr	r2, [r4, #0]
 800087e:	1b52      	subs	r2, r2, r5
 8000880:	d420      	bmi.n	80008c4 <_malloc_r+0xd0>
 8000882:	2a0b      	cmp	r2, #11
 8000884:	d917      	bls.n	80008b6 <_malloc_r+0xc2>
 8000886:	1961      	adds	r1, r4, r5
 8000888:	42a3      	cmp	r3, r4
 800088a:	6025      	str	r5, [r4, #0]
 800088c:	bf18      	it	ne
 800088e:	6059      	strne	r1, [r3, #4]
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	bf08      	it	eq
 8000894:	f8c8 1000 	streq.w	r1, [r8]
 8000898:	5162      	str	r2, [r4, r5]
 800089a:	604b      	str	r3, [r1, #4]
 800089c:	4630      	mov	r0, r6
 800089e:	f000 f82f 	bl	8000900 <__malloc_unlock>
 80008a2:	f104 000b 	add.w	r0, r4, #11
 80008a6:	1d23      	adds	r3, r4, #4
 80008a8:	f020 0007 	bic.w	r0, r0, #7
 80008ac:	1ac2      	subs	r2, r0, r3
 80008ae:	bf1c      	itt	ne
 80008b0:	1a1b      	subne	r3, r3, r0
 80008b2:	50a3      	strne	r3, [r4, r2]
 80008b4:	e7af      	b.n	8000816 <_malloc_r+0x22>
 80008b6:	6862      	ldr	r2, [r4, #4]
 80008b8:	42a3      	cmp	r3, r4
 80008ba:	bf0c      	ite	eq
 80008bc:	f8c8 2000 	streq.w	r2, [r8]
 80008c0:	605a      	strne	r2, [r3, #4]
 80008c2:	e7eb      	b.n	800089c <_malloc_r+0xa8>
 80008c4:	4623      	mov	r3, r4
 80008c6:	6864      	ldr	r4, [r4, #4]
 80008c8:	e7ae      	b.n	8000828 <_malloc_r+0x34>
 80008ca:	463c      	mov	r4, r7
 80008cc:	687f      	ldr	r7, [r7, #4]
 80008ce:	e7b6      	b.n	800083e <_malloc_r+0x4a>
 80008d0:	461a      	mov	r2, r3
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	42a3      	cmp	r3, r4
 80008d6:	d1fb      	bne.n	80008d0 <_malloc_r+0xdc>
 80008d8:	2300      	movs	r3, #0
 80008da:	6053      	str	r3, [r2, #4]
 80008dc:	e7de      	b.n	800089c <_malloc_r+0xa8>
 80008de:	230c      	movs	r3, #12
 80008e0:	6033      	str	r3, [r6, #0]
 80008e2:	4630      	mov	r0, r6
 80008e4:	f000 f80c 	bl	8000900 <__malloc_unlock>
 80008e8:	e794      	b.n	8000814 <_malloc_r+0x20>
 80008ea:	6005      	str	r5, [r0, #0]
 80008ec:	e7d6      	b.n	800089c <_malloc_r+0xa8>
 80008ee:	bf00      	nop
 80008f0:	200001c8 	.word	0x200001c8

080008f4 <__malloc_lock>:
 80008f4:	4801      	ldr	r0, [pc, #4]	@ (80008fc <__malloc_lock+0x8>)
 80008f6:	f7ff bf0f 	b.w	8000718 <__retarget_lock_acquire_recursive>
 80008fa:	bf00      	nop
 80008fc:	200001c0 	.word	0x200001c0

08000900 <__malloc_unlock>:
 8000900:	4801      	ldr	r0, [pc, #4]	@ (8000908 <__malloc_unlock+0x8>)
 8000902:	f7ff bf0a 	b.w	800071a <__retarget_lock_release_recursive>
 8000906:	bf00      	nop
 8000908:	200001c0 	.word	0x200001c0

0800090c <__ssputs_r>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	688e      	ldr	r6, [r1, #8]
 8000912:	461f      	mov	r7, r3
 8000914:	42be      	cmp	r6, r7
 8000916:	680b      	ldr	r3, [r1, #0]
 8000918:	4682      	mov	sl, r0
 800091a:	460c      	mov	r4, r1
 800091c:	4690      	mov	r8, r2
 800091e:	d82d      	bhi.n	800097c <__ssputs_r+0x70>
 8000920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000924:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000928:	d026      	beq.n	8000978 <__ssputs_r+0x6c>
 800092a:	6965      	ldr	r5, [r4, #20]
 800092c:	6909      	ldr	r1, [r1, #16]
 800092e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000932:	eba3 0901 	sub.w	r9, r3, r1
 8000936:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800093a:	1c7b      	adds	r3, r7, #1
 800093c:	444b      	add	r3, r9
 800093e:	106d      	asrs	r5, r5, #1
 8000940:	429d      	cmp	r5, r3
 8000942:	bf38      	it	cc
 8000944:	461d      	movcc	r5, r3
 8000946:	0553      	lsls	r3, r2, #21
 8000948:	d527      	bpl.n	800099a <__ssputs_r+0x8e>
 800094a:	4629      	mov	r1, r5
 800094c:	f7ff ff52 	bl	80007f4 <_malloc_r>
 8000950:	4606      	mov	r6, r0
 8000952:	b360      	cbz	r0, 80009ae <__ssputs_r+0xa2>
 8000954:	6921      	ldr	r1, [r4, #16]
 8000956:	464a      	mov	r2, r9
 8000958:	f000 fae8 	bl	8000f2c <memcpy>
 800095c:	89a3      	ldrh	r3, [r4, #12]
 800095e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000966:	81a3      	strh	r3, [r4, #12]
 8000968:	6126      	str	r6, [r4, #16]
 800096a:	6165      	str	r5, [r4, #20]
 800096c:	444e      	add	r6, r9
 800096e:	eba5 0509 	sub.w	r5, r5, r9
 8000972:	6026      	str	r6, [r4, #0]
 8000974:	60a5      	str	r5, [r4, #8]
 8000976:	463e      	mov	r6, r7
 8000978:	42be      	cmp	r6, r7
 800097a:	d900      	bls.n	800097e <__ssputs_r+0x72>
 800097c:	463e      	mov	r6, r7
 800097e:	6820      	ldr	r0, [r4, #0]
 8000980:	4632      	mov	r2, r6
 8000982:	4641      	mov	r1, r8
 8000984:	f000 faa8 	bl	8000ed8 <memmove>
 8000988:	68a3      	ldr	r3, [r4, #8]
 800098a:	1b9b      	subs	r3, r3, r6
 800098c:	60a3      	str	r3, [r4, #8]
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	4433      	add	r3, r6
 8000992:	6023      	str	r3, [r4, #0]
 8000994:	2000      	movs	r0, #0
 8000996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099a:	462a      	mov	r2, r5
 800099c:	f000 fad4 	bl	8000f48 <_realloc_r>
 80009a0:	4606      	mov	r6, r0
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d1e0      	bne.n	8000968 <__ssputs_r+0x5c>
 80009a6:	6921      	ldr	r1, [r4, #16]
 80009a8:	4650      	mov	r0, sl
 80009aa:	f7ff feb7 	bl	800071c <_free_r>
 80009ae:	230c      	movs	r3, #12
 80009b0:	f8ca 3000 	str.w	r3, [sl]
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ba:	81a3      	strh	r3, [r4, #12]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c0:	e7e9      	b.n	8000996 <__ssputs_r+0x8a>
	...

080009c4 <_svfiprintf_r>:
 80009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	4698      	mov	r8, r3
 80009ca:	898b      	ldrh	r3, [r1, #12]
 80009cc:	061b      	lsls	r3, r3, #24
 80009ce:	b09d      	sub	sp, #116	@ 0x74
 80009d0:	4607      	mov	r7, r0
 80009d2:	460d      	mov	r5, r1
 80009d4:	4614      	mov	r4, r2
 80009d6:	d510      	bpl.n	80009fa <_svfiprintf_r+0x36>
 80009d8:	690b      	ldr	r3, [r1, #16]
 80009da:	b973      	cbnz	r3, 80009fa <_svfiprintf_r+0x36>
 80009dc:	2140      	movs	r1, #64	@ 0x40
 80009de:	f7ff ff09 	bl	80007f4 <_malloc_r>
 80009e2:	6028      	str	r0, [r5, #0]
 80009e4:	6128      	str	r0, [r5, #16]
 80009e6:	b930      	cbnz	r0, 80009f6 <_svfiprintf_r+0x32>
 80009e8:	230c      	movs	r3, #12
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f0:	b01d      	add	sp, #116	@ 0x74
 80009f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f6:	2340      	movs	r3, #64	@ 0x40
 80009f8:	616b      	str	r3, [r5, #20]
 80009fa:	2300      	movs	r3, #0
 80009fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80009fe:	2320      	movs	r3, #32
 8000a00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a08:	2330      	movs	r3, #48	@ 0x30
 8000a0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000ba8 <_svfiprintf_r+0x1e4>
 8000a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a12:	f04f 0901 	mov.w	r9, #1
 8000a16:	4623      	mov	r3, r4
 8000a18:	469a      	mov	sl, r3
 8000a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a1e:	b10a      	cbz	r2, 8000a24 <_svfiprintf_r+0x60>
 8000a20:	2a25      	cmp	r2, #37	@ 0x25
 8000a22:	d1f9      	bne.n	8000a18 <_svfiprintf_r+0x54>
 8000a24:	ebba 0b04 	subs.w	fp, sl, r4
 8000a28:	d00b      	beq.n	8000a42 <_svfiprintf_r+0x7e>
 8000a2a:	465b      	mov	r3, fp
 8000a2c:	4622      	mov	r2, r4
 8000a2e:	4629      	mov	r1, r5
 8000a30:	4638      	mov	r0, r7
 8000a32:	f7ff ff6b 	bl	800090c <__ssputs_r>
 8000a36:	3001      	adds	r0, #1
 8000a38:	f000 80a7 	beq.w	8000b8a <_svfiprintf_r+0x1c6>
 8000a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a3e:	445a      	add	r2, fp
 8000a40:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a42:	f89a 3000 	ldrb.w	r3, [sl]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 809f 	beq.w	8000b8a <_svfiprintf_r+0x1c6>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a56:	f10a 0a01 	add.w	sl, sl, #1
 8000a5a:	9304      	str	r3, [sp, #16]
 8000a5c:	9307      	str	r3, [sp, #28]
 8000a5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a62:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a64:	4654      	mov	r4, sl
 8000a66:	2205      	movs	r2, #5
 8000a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a6c:	484e      	ldr	r0, [pc, #312]	@ (8000ba8 <_svfiprintf_r+0x1e4>)
 8000a6e:	f7ff fbaf 	bl	80001d0 <memchr>
 8000a72:	9a04      	ldr	r2, [sp, #16]
 8000a74:	b9d8      	cbnz	r0, 8000aae <_svfiprintf_r+0xea>
 8000a76:	06d0      	lsls	r0, r2, #27
 8000a78:	bf44      	itt	mi
 8000a7a:	2320      	movmi	r3, #32
 8000a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a80:	0711      	lsls	r1, r2, #28
 8000a82:	bf44      	itt	mi
 8000a84:	232b      	movmi	r3, #43	@ 0x2b
 8000a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8000a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a90:	d015      	beq.n	8000abe <_svfiprintf_r+0xfa>
 8000a92:	9a07      	ldr	r2, [sp, #28]
 8000a94:	4654      	mov	r4, sl
 8000a96:	2000      	movs	r0, #0
 8000a98:	f04f 0c0a 	mov.w	ip, #10
 8000a9c:	4621      	mov	r1, r4
 8000a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000aa2:	3b30      	subs	r3, #48	@ 0x30
 8000aa4:	2b09      	cmp	r3, #9
 8000aa6:	d94b      	bls.n	8000b40 <_svfiprintf_r+0x17c>
 8000aa8:	b1b0      	cbz	r0, 8000ad8 <_svfiprintf_r+0x114>
 8000aaa:	9207      	str	r2, [sp, #28]
 8000aac:	e014      	b.n	8000ad8 <_svfiprintf_r+0x114>
 8000aae:	eba0 0308 	sub.w	r3, r0, r8
 8000ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	9304      	str	r3, [sp, #16]
 8000aba:	46a2      	mov	sl, r4
 8000abc:	e7d2      	b.n	8000a64 <_svfiprintf_r+0xa0>
 8000abe:	9b03      	ldr	r3, [sp, #12]
 8000ac0:	1d19      	adds	r1, r3, #4
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	9103      	str	r1, [sp, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bfbb      	ittet	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	f042 0202 	orrlt.w	r2, r2, #2
 8000ad0:	9307      	strge	r3, [sp, #28]
 8000ad2:	9307      	strlt	r3, [sp, #28]
 8000ad4:	bfb8      	it	lt
 8000ad6:	9204      	strlt	r2, [sp, #16]
 8000ad8:	7823      	ldrb	r3, [r4, #0]
 8000ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8000adc:	d10a      	bne.n	8000af4 <_svfiprintf_r+0x130>
 8000ade:	7863      	ldrb	r3, [r4, #1]
 8000ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ae2:	d132      	bne.n	8000b4a <_svfiprintf_r+0x186>
 8000ae4:	9b03      	ldr	r3, [sp, #12]
 8000ae6:	1d1a      	adds	r2, r3, #4
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	9203      	str	r2, [sp, #12]
 8000aec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000af0:	3402      	adds	r4, #2
 8000af2:	9305      	str	r3, [sp, #20]
 8000af4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000bac <_svfiprintf_r+0x1e8>
 8000af8:	7821      	ldrb	r1, [r4, #0]
 8000afa:	2203      	movs	r2, #3
 8000afc:	4650      	mov	r0, sl
 8000afe:	f7ff fb67 	bl	80001d0 <memchr>
 8000b02:	b138      	cbz	r0, 8000b14 <_svfiprintf_r+0x150>
 8000b04:	9b04      	ldr	r3, [sp, #16]
 8000b06:	eba0 000a 	sub.w	r0, r0, sl
 8000b0a:	2240      	movs	r2, #64	@ 0x40
 8000b0c:	4082      	lsls	r2, r0
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	3401      	adds	r4, #1
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b18:	4825      	ldr	r0, [pc, #148]	@ (8000bb0 <_svfiprintf_r+0x1ec>)
 8000b1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b1e:	2206      	movs	r2, #6
 8000b20:	f7ff fb56 	bl	80001d0 <memchr>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d036      	beq.n	8000b96 <_svfiprintf_r+0x1d2>
 8000b28:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <_svfiprintf_r+0x1f0>)
 8000b2a:	bb1b      	cbnz	r3, 8000b74 <_svfiprintf_r+0x1b0>
 8000b2c:	9b03      	ldr	r3, [sp, #12]
 8000b2e:	3307      	adds	r3, #7
 8000b30:	f023 0307 	bic.w	r3, r3, #7
 8000b34:	3308      	adds	r3, #8
 8000b36:	9303      	str	r3, [sp, #12]
 8000b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b3a:	4433      	add	r3, r6
 8000b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b3e:	e76a      	b.n	8000a16 <_svfiprintf_r+0x52>
 8000b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b44:	460c      	mov	r4, r1
 8000b46:	2001      	movs	r0, #1
 8000b48:	e7a8      	b.n	8000a9c <_svfiprintf_r+0xd8>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	3401      	adds	r4, #1
 8000b4e:	9305      	str	r3, [sp, #20]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 0c0a 	mov.w	ip, #10
 8000b56:	4620      	mov	r0, r4
 8000b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b5c:	3a30      	subs	r2, #48	@ 0x30
 8000b5e:	2a09      	cmp	r2, #9
 8000b60:	d903      	bls.n	8000b6a <_svfiprintf_r+0x1a6>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0c6      	beq.n	8000af4 <_svfiprintf_r+0x130>
 8000b66:	9105      	str	r1, [sp, #20]
 8000b68:	e7c4      	b.n	8000af4 <_svfiprintf_r+0x130>
 8000b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b6e:	4604      	mov	r4, r0
 8000b70:	2301      	movs	r3, #1
 8000b72:	e7f0      	b.n	8000b56 <_svfiprintf_r+0x192>
 8000b74:	ab03      	add	r3, sp, #12
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	462a      	mov	r2, r5
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <_svfiprintf_r+0x1f4>)
 8000b7c:	a904      	add	r1, sp, #16
 8000b7e:	4638      	mov	r0, r7
 8000b80:	f3af 8000 	nop.w
 8000b84:	1c42      	adds	r2, r0, #1
 8000b86:	4606      	mov	r6, r0
 8000b88:	d1d6      	bne.n	8000b38 <_svfiprintf_r+0x174>
 8000b8a:	89ab      	ldrh	r3, [r5, #12]
 8000b8c:	065b      	lsls	r3, r3, #25
 8000b8e:	f53f af2d 	bmi.w	80009ec <_svfiprintf_r+0x28>
 8000b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b94:	e72c      	b.n	80009f0 <_svfiprintf_r+0x2c>
 8000b96:	ab03      	add	r3, sp, #12
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <_svfiprintf_r+0x1f4>)
 8000b9e:	a904      	add	r1, sp, #16
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	f000 f879 	bl	8000c98 <_printf_i>
 8000ba6:	e7ed      	b.n	8000b84 <_svfiprintf_r+0x1c0>
 8000ba8:	08000fd7 	.word	0x08000fd7
 8000bac:	08000fdd 	.word	0x08000fdd
 8000bb0:	08000fe1 	.word	0x08000fe1
 8000bb4:	00000000 	.word	0x00000000
 8000bb8:	0800090d 	.word	0x0800090d

08000bbc <_printf_common>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	4616      	mov	r6, r2
 8000bc2:	4698      	mov	r8, r3
 8000bc4:	688a      	ldr	r2, [r1, #8]
 8000bc6:	690b      	ldr	r3, [r1, #16]
 8000bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	bfb8      	it	lt
 8000bd0:	4613      	movlt	r3, r2
 8000bd2:	6033      	str	r3, [r6, #0]
 8000bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000bd8:	4607      	mov	r7, r0
 8000bda:	460c      	mov	r4, r1
 8000bdc:	b10a      	cbz	r2, 8000be2 <_printf_common+0x26>
 8000bde:	3301      	adds	r3, #1
 8000be0:	6033      	str	r3, [r6, #0]
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	0699      	lsls	r1, r3, #26
 8000be6:	bf42      	ittt	mi
 8000be8:	6833      	ldrmi	r3, [r6, #0]
 8000bea:	3302      	addmi	r3, #2
 8000bec:	6033      	strmi	r3, [r6, #0]
 8000bee:	6825      	ldr	r5, [r4, #0]
 8000bf0:	f015 0506 	ands.w	r5, r5, #6
 8000bf4:	d106      	bne.n	8000c04 <_printf_common+0x48>
 8000bf6:	f104 0a19 	add.w	sl, r4, #25
 8000bfa:	68e3      	ldr	r3, [r4, #12]
 8000bfc:	6832      	ldr	r2, [r6, #0]
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	dc26      	bgt.n	8000c52 <_printf_common+0x96>
 8000c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	3b00      	subs	r3, #0
 8000c0c:	bf18      	it	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	0692      	lsls	r2, r2, #26
 8000c12:	d42b      	bmi.n	8000c6c <_printf_common+0xb0>
 8000c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c18:	4641      	mov	r1, r8
 8000c1a:	4638      	mov	r0, r7
 8000c1c:	47c8      	blx	r9
 8000c1e:	3001      	adds	r0, #1
 8000c20:	d01e      	beq.n	8000c60 <_printf_common+0xa4>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	6922      	ldr	r2, [r4, #16]
 8000c26:	f003 0306 	and.w	r3, r3, #6
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf02      	ittt	eq
 8000c2e:	68e5      	ldreq	r5, [r4, #12]
 8000c30:	6833      	ldreq	r3, [r6, #0]
 8000c32:	1aed      	subeq	r5, r5, r3
 8000c34:	68a3      	ldr	r3, [r4, #8]
 8000c36:	bf0c      	ite	eq
 8000c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c3c:	2500      	movne	r5, #0
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	bfc4      	itt	gt
 8000c42:	1a9b      	subgt	r3, r3, r2
 8000c44:	18ed      	addgt	r5, r5, r3
 8000c46:	2600      	movs	r6, #0
 8000c48:	341a      	adds	r4, #26
 8000c4a:	42b5      	cmp	r5, r6
 8000c4c:	d11a      	bne.n	8000c84 <_printf_common+0xc8>
 8000c4e:	2000      	movs	r0, #0
 8000c50:	e008      	b.n	8000c64 <_printf_common+0xa8>
 8000c52:	2301      	movs	r3, #1
 8000c54:	4652      	mov	r2, sl
 8000c56:	4641      	mov	r1, r8
 8000c58:	4638      	mov	r0, r7
 8000c5a:	47c8      	blx	r9
 8000c5c:	3001      	adds	r0, #1
 8000c5e:	d103      	bne.n	8000c68 <_printf_common+0xac>
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	3501      	adds	r5, #1
 8000c6a:	e7c6      	b.n	8000bfa <_printf_common+0x3e>
 8000c6c:	18e1      	adds	r1, r4, r3
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	2030      	movs	r0, #48	@ 0x30
 8000c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c76:	4422      	add	r2, r4
 8000c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c80:	3302      	adds	r3, #2
 8000c82:	e7c7      	b.n	8000c14 <_printf_common+0x58>
 8000c84:	2301      	movs	r3, #1
 8000c86:	4622      	mov	r2, r4
 8000c88:	4641      	mov	r1, r8
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	47c8      	blx	r9
 8000c8e:	3001      	adds	r0, #1
 8000c90:	d0e6      	beq.n	8000c60 <_printf_common+0xa4>
 8000c92:	3601      	adds	r6, #1
 8000c94:	e7d9      	b.n	8000c4a <_printf_common+0x8e>
	...

08000c98 <_printf_i>:
 8000c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	7e0f      	ldrb	r7, [r1, #24]
 8000c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ca0:	2f78      	cmp	r7, #120	@ 0x78
 8000ca2:	4691      	mov	r9, r2
 8000ca4:	4680      	mov	r8, r0
 8000ca6:	460c      	mov	r4, r1
 8000ca8:	469a      	mov	sl, r3
 8000caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cae:	d807      	bhi.n	8000cc0 <_printf_i+0x28>
 8000cb0:	2f62      	cmp	r7, #98	@ 0x62
 8000cb2:	d80a      	bhi.n	8000cca <_printf_i+0x32>
 8000cb4:	2f00      	cmp	r7, #0
 8000cb6:	f000 80d2 	beq.w	8000e5e <_printf_i+0x1c6>
 8000cba:	2f58      	cmp	r7, #88	@ 0x58
 8000cbc:	f000 80b9 	beq.w	8000e32 <_printf_i+0x19a>
 8000cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000cc8:	e03a      	b.n	8000d40 <_printf_i+0xa8>
 8000cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000cce:	2b15      	cmp	r3, #21
 8000cd0:	d8f6      	bhi.n	8000cc0 <_printf_i+0x28>
 8000cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8000cd8 <_printf_i+0x40>)
 8000cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cd8:	08000d31 	.word	0x08000d31
 8000cdc:	08000d45 	.word	0x08000d45
 8000ce0:	08000cc1 	.word	0x08000cc1
 8000ce4:	08000cc1 	.word	0x08000cc1
 8000ce8:	08000cc1 	.word	0x08000cc1
 8000cec:	08000cc1 	.word	0x08000cc1
 8000cf0:	08000d45 	.word	0x08000d45
 8000cf4:	08000cc1 	.word	0x08000cc1
 8000cf8:	08000cc1 	.word	0x08000cc1
 8000cfc:	08000cc1 	.word	0x08000cc1
 8000d00:	08000cc1 	.word	0x08000cc1
 8000d04:	08000e45 	.word	0x08000e45
 8000d08:	08000d6f 	.word	0x08000d6f
 8000d0c:	08000dff 	.word	0x08000dff
 8000d10:	08000cc1 	.word	0x08000cc1
 8000d14:	08000cc1 	.word	0x08000cc1
 8000d18:	08000e67 	.word	0x08000e67
 8000d1c:	08000cc1 	.word	0x08000cc1
 8000d20:	08000d6f 	.word	0x08000d6f
 8000d24:	08000cc1 	.word	0x08000cc1
 8000d28:	08000cc1 	.word	0x08000cc1
 8000d2c:	08000e07 	.word	0x08000e07
 8000d30:	6833      	ldr	r3, [r6, #0]
 8000d32:	1d1a      	adds	r2, r3, #4
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6032      	str	r2, [r6, #0]
 8000d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d40:	2301      	movs	r3, #1
 8000d42:	e09d      	b.n	8000e80 <_printf_i+0x1e8>
 8000d44:	6833      	ldr	r3, [r6, #0]
 8000d46:	6820      	ldr	r0, [r4, #0]
 8000d48:	1d19      	adds	r1, r3, #4
 8000d4a:	6031      	str	r1, [r6, #0]
 8000d4c:	0606      	lsls	r6, r0, #24
 8000d4e:	d501      	bpl.n	8000d54 <_printf_i+0xbc>
 8000d50:	681d      	ldr	r5, [r3, #0]
 8000d52:	e003      	b.n	8000d5c <_printf_i+0xc4>
 8000d54:	0645      	lsls	r5, r0, #25
 8000d56:	d5fb      	bpl.n	8000d50 <_printf_i+0xb8>
 8000d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	da03      	bge.n	8000d68 <_printf_i+0xd0>
 8000d60:	232d      	movs	r3, #45	@ 0x2d
 8000d62:	426d      	negs	r5, r5
 8000d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d68:	4859      	ldr	r0, [pc, #356]	@ (8000ed0 <_printf_i+0x238>)
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	e011      	b.n	8000d92 <_printf_i+0xfa>
 8000d6e:	6821      	ldr	r1, [r4, #0]
 8000d70:	6833      	ldr	r3, [r6, #0]
 8000d72:	0608      	lsls	r0, r1, #24
 8000d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d78:	d402      	bmi.n	8000d80 <_printf_i+0xe8>
 8000d7a:	0649      	lsls	r1, r1, #25
 8000d7c:	bf48      	it	mi
 8000d7e:	b2ad      	uxthmi	r5, r5
 8000d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d82:	4853      	ldr	r0, [pc, #332]	@ (8000ed0 <_printf_i+0x238>)
 8000d84:	6033      	str	r3, [r6, #0]
 8000d86:	bf14      	ite	ne
 8000d88:	230a      	movne	r3, #10
 8000d8a:	2308      	moveq	r3, #8
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d92:	6866      	ldr	r6, [r4, #4]
 8000d94:	60a6      	str	r6, [r4, #8]
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	bfa2      	ittt	ge
 8000d9a:	6821      	ldrge	r1, [r4, #0]
 8000d9c:	f021 0104 	bicge.w	r1, r1, #4
 8000da0:	6021      	strge	r1, [r4, #0]
 8000da2:	b90d      	cbnz	r5, 8000da8 <_printf_i+0x110>
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d04b      	beq.n	8000e40 <_printf_i+0x1a8>
 8000da8:	4616      	mov	r6, r2
 8000daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dae:	fb03 5711 	mls	r7, r3, r1, r5
 8000db2:	5dc7      	ldrb	r7, [r0, r7]
 8000db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000db8:	462f      	mov	r7, r5
 8000dba:	42bb      	cmp	r3, r7
 8000dbc:	460d      	mov	r5, r1
 8000dbe:	d9f4      	bls.n	8000daa <_printf_i+0x112>
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d10b      	bne.n	8000ddc <_printf_i+0x144>
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	07df      	lsls	r7, r3, #31
 8000dc8:	d508      	bpl.n	8000ddc <_printf_i+0x144>
 8000dca:	6923      	ldr	r3, [r4, #16]
 8000dcc:	6861      	ldr	r1, [r4, #4]
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	bfde      	ittt	le
 8000dd2:	2330      	movle	r3, #48	@ 0x30
 8000dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000dd8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000ddc:	1b92      	subs	r2, r2, r6
 8000dde:	6122      	str	r2, [r4, #16]
 8000de0:	f8cd a000 	str.w	sl, [sp]
 8000de4:	464b      	mov	r3, r9
 8000de6:	aa03      	add	r2, sp, #12
 8000de8:	4621      	mov	r1, r4
 8000dea:	4640      	mov	r0, r8
 8000dec:	f7ff fee6 	bl	8000bbc <_printf_common>
 8000df0:	3001      	adds	r0, #1
 8000df2:	d14a      	bne.n	8000e8a <_printf_i+0x1f2>
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000df8:	b004      	add	sp, #16
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	6023      	str	r3, [r4, #0]
 8000e06:	4833      	ldr	r0, [pc, #204]	@ (8000ed4 <_printf_i+0x23c>)
 8000e08:	2778      	movs	r7, #120	@ 0x78
 8000e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	6831      	ldr	r1, [r6, #0]
 8000e12:	061f      	lsls	r7, r3, #24
 8000e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e18:	d402      	bmi.n	8000e20 <_printf_i+0x188>
 8000e1a:	065f      	lsls	r7, r3, #25
 8000e1c:	bf48      	it	mi
 8000e1e:	b2ad      	uxthmi	r5, r5
 8000e20:	6031      	str	r1, [r6, #0]
 8000e22:	07d9      	lsls	r1, r3, #31
 8000e24:	bf44      	itt	mi
 8000e26:	f043 0320 	orrmi.w	r3, r3, #32
 8000e2a:	6023      	strmi	r3, [r4, #0]
 8000e2c:	b11d      	cbz	r5, 8000e36 <_printf_i+0x19e>
 8000e2e:	2310      	movs	r3, #16
 8000e30:	e7ac      	b.n	8000d8c <_printf_i+0xf4>
 8000e32:	4827      	ldr	r0, [pc, #156]	@ (8000ed0 <_printf_i+0x238>)
 8000e34:	e7e9      	b.n	8000e0a <_printf_i+0x172>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	f023 0320 	bic.w	r3, r3, #32
 8000e3c:	6023      	str	r3, [r4, #0]
 8000e3e:	e7f6      	b.n	8000e2e <_printf_i+0x196>
 8000e40:	4616      	mov	r6, r2
 8000e42:	e7bd      	b.n	8000dc0 <_printf_i+0x128>
 8000e44:	6833      	ldr	r3, [r6, #0]
 8000e46:	6825      	ldr	r5, [r4, #0]
 8000e48:	6961      	ldr	r1, [r4, #20]
 8000e4a:	1d18      	adds	r0, r3, #4
 8000e4c:	6030      	str	r0, [r6, #0]
 8000e4e:	062e      	lsls	r6, r5, #24
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	d501      	bpl.n	8000e58 <_printf_i+0x1c0>
 8000e54:	6019      	str	r1, [r3, #0]
 8000e56:	e002      	b.n	8000e5e <_printf_i+0x1c6>
 8000e58:	0668      	lsls	r0, r5, #25
 8000e5a:	d5fb      	bpl.n	8000e54 <_printf_i+0x1bc>
 8000e5c:	8019      	strh	r1, [r3, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6123      	str	r3, [r4, #16]
 8000e62:	4616      	mov	r6, r2
 8000e64:	e7bc      	b.n	8000de0 <_printf_i+0x148>
 8000e66:	6833      	ldr	r3, [r6, #0]
 8000e68:	1d1a      	adds	r2, r3, #4
 8000e6a:	6032      	str	r2, [r6, #0]
 8000e6c:	681e      	ldr	r6, [r3, #0]
 8000e6e:	6862      	ldr	r2, [r4, #4]
 8000e70:	2100      	movs	r1, #0
 8000e72:	4630      	mov	r0, r6
 8000e74:	f7ff f9ac 	bl	80001d0 <memchr>
 8000e78:	b108      	cbz	r0, 8000e7e <_printf_i+0x1e6>
 8000e7a:	1b80      	subs	r0, r0, r6
 8000e7c:	6060      	str	r0, [r4, #4]
 8000e7e:	6863      	ldr	r3, [r4, #4]
 8000e80:	6123      	str	r3, [r4, #16]
 8000e82:	2300      	movs	r3, #0
 8000e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e88:	e7aa      	b.n	8000de0 <_printf_i+0x148>
 8000e8a:	6923      	ldr	r3, [r4, #16]
 8000e8c:	4632      	mov	r2, r6
 8000e8e:	4649      	mov	r1, r9
 8000e90:	4640      	mov	r0, r8
 8000e92:	47d0      	blx	sl
 8000e94:	3001      	adds	r0, #1
 8000e96:	d0ad      	beq.n	8000df4 <_printf_i+0x15c>
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	079b      	lsls	r3, r3, #30
 8000e9c:	d413      	bmi.n	8000ec6 <_printf_i+0x22e>
 8000e9e:	68e0      	ldr	r0, [r4, #12]
 8000ea0:	9b03      	ldr	r3, [sp, #12]
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	bfb8      	it	lt
 8000ea6:	4618      	movlt	r0, r3
 8000ea8:	e7a6      	b.n	8000df8 <_printf_i+0x160>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	4632      	mov	r2, r6
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	47d0      	blx	sl
 8000eb4:	3001      	adds	r0, #1
 8000eb6:	d09d      	beq.n	8000df4 <_printf_i+0x15c>
 8000eb8:	3501      	adds	r5, #1
 8000eba:	68e3      	ldr	r3, [r4, #12]
 8000ebc:	9903      	ldr	r1, [sp, #12]
 8000ebe:	1a5b      	subs	r3, r3, r1
 8000ec0:	42ab      	cmp	r3, r5
 8000ec2:	dcf2      	bgt.n	8000eaa <_printf_i+0x212>
 8000ec4:	e7eb      	b.n	8000e9e <_printf_i+0x206>
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	f104 0619 	add.w	r6, r4, #25
 8000ecc:	e7f5      	b.n	8000eba <_printf_i+0x222>
 8000ece:	bf00      	nop
 8000ed0:	08000fe8 	.word	0x08000fe8
 8000ed4:	08000ff9 	.word	0x08000ff9

08000ed8 <memmove>:
 8000ed8:	4288      	cmp	r0, r1
 8000eda:	b510      	push	{r4, lr}
 8000edc:	eb01 0402 	add.w	r4, r1, r2
 8000ee0:	d902      	bls.n	8000ee8 <memmove+0x10>
 8000ee2:	4284      	cmp	r4, r0
 8000ee4:	4623      	mov	r3, r4
 8000ee6:	d807      	bhi.n	8000ef8 <memmove+0x20>
 8000ee8:	1e43      	subs	r3, r0, #1
 8000eea:	42a1      	cmp	r1, r4
 8000eec:	d008      	beq.n	8000f00 <memmove+0x28>
 8000eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000ef6:	e7f8      	b.n	8000eea <memmove+0x12>
 8000ef8:	4402      	add	r2, r0
 8000efa:	4601      	mov	r1, r0
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d100      	bne.n	8000f02 <memmove+0x2a>
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f0a:	e7f7      	b.n	8000efc <memmove+0x24>

08000f0c <_sbrk_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d06      	ldr	r5, [pc, #24]	@ (8000f28 <_sbrk_r+0x1c>)
 8000f10:	2300      	movs	r3, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	602b      	str	r3, [r5, #0]
 8000f18:	f7ff fa3a 	bl	8000390 <_sbrk>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_sbrk_r+0x1a>
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_sbrk_r+0x1a>
 8000f24:	6023      	str	r3, [r4, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	200001bc 	.word	0x200001bc

08000f2c <memcpy>:
 8000f2c:	440a      	add	r2, r1
 8000f2e:	4291      	cmp	r1, r2
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000f34:	d100      	bne.n	8000f38 <memcpy+0xc>
 8000f36:	4770      	bx	lr
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d1f9      	bne.n	8000f3a <memcpy+0xe>
 8000f46:	bd10      	pop	{r4, pc}

08000f48 <_realloc_r>:
 8000f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	4615      	mov	r5, r2
 8000f50:	460c      	mov	r4, r1
 8000f52:	b921      	cbnz	r1, 8000f5e <_realloc_r+0x16>
 8000f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f58:	4611      	mov	r1, r2
 8000f5a:	f7ff bc4b 	b.w	80007f4 <_malloc_r>
 8000f5e:	b92a      	cbnz	r2, 8000f6c <_realloc_r+0x24>
 8000f60:	f7ff fbdc 	bl	800071c <_free_r>
 8000f64:	2400      	movs	r4, #0
 8000f66:	4620      	mov	r0, r4
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f6c:	f000 f81a 	bl	8000fa4 <_malloc_usable_size_r>
 8000f70:	4285      	cmp	r5, r0
 8000f72:	4606      	mov	r6, r0
 8000f74:	d802      	bhi.n	8000f7c <_realloc_r+0x34>
 8000f76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f7a:	d8f4      	bhi.n	8000f66 <_realloc_r+0x1e>
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	4640      	mov	r0, r8
 8000f80:	f7ff fc38 	bl	80007f4 <_malloc_r>
 8000f84:	4607      	mov	r7, r0
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d0ec      	beq.n	8000f64 <_realloc_r+0x1c>
 8000f8a:	42b5      	cmp	r5, r6
 8000f8c:	462a      	mov	r2, r5
 8000f8e:	4621      	mov	r1, r4
 8000f90:	bf28      	it	cs
 8000f92:	4632      	movcs	r2, r6
 8000f94:	f7ff ffca 	bl	8000f2c <memcpy>
 8000f98:	4621      	mov	r1, r4
 8000f9a:	4640      	mov	r0, r8
 8000f9c:	f7ff fbbe 	bl	800071c <_free_r>
 8000fa0:	463c      	mov	r4, r7
 8000fa2:	e7e0      	b.n	8000f66 <_realloc_r+0x1e>

08000fa4 <_malloc_usable_size_r>:
 8000fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fa8:	1f18      	subs	r0, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bfbc      	itt	lt
 8000fae:	580b      	ldrlt	r3, [r1, r0]
 8000fb0:	18c0      	addlt	r0, r0, r3
 8000fb2:	4770      	bx	lr

08000fb4 <_init>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	bf00      	nop
 8000fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fba:	bc08      	pop	{r3}
 8000fbc:	469e      	mov	lr, r3
 8000fbe:	4770      	bx	lr

08000fc0 <_fini>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr
